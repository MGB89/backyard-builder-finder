name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Lint and type check
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Node dependencies
        run: |
          npm ci
          cd apps/web && npm ci
      
      - name: Install Python dependencies
        run: |
          cd apps/api
          pip install -r requirements.txt
          pip install black flake8 mypy
      
      - name: Lint TypeScript/JavaScript
        run: |
          npm run lint
          cd apps/web && npm run lint
      
      - name: Type check TypeScript
        run: |
          npm run type-check
          cd apps/web && npm run type-check
      
      - name: Lint Python
        run: |
          cd apps/api
          black --check .
          flake8 . --max-line-length=100 --ignore=E203,W503
      
      - name: Type check Python
        run: |
          cd apps/api
          mypy . --ignore-missing-imports || true

  # Test Frontend
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          cd apps/web && npm ci
      
      - name: Run tests
        run: |
          cd apps/web
          npm run test:ci
        env:
          CI: true
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./apps/web/coverage
          flags: frontend

  # Test Backend
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgis/postgis:14-3.2
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          cd apps/api
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov
      
      - name: Run tests
        run: |
          cd apps/api
          pytest tests/ -v --cov=. --cov-report=xml
        env:
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_secret
          ENVIRONMENT: test
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./apps/api
          flags: backend

  # Build Docker images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push API image
        uses: docker/build-push-action@v4
        with:
          context: ./apps/api
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/api:latest
            ghcr.io/${{ github.repository }}/api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push Web image
        uses: docker/build-push-action@v4
        with:
          context: ./apps/web
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/web:latest
            ghcr.io/${{ github.repository }}/web:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run npm audit
        run: |
          npm audit --audit-level=high || true
          cd apps/web && npm audit --audit-level=high || true
      
      - name: Run pip-audit
        run: |
          pip install pip-audit
          cd apps/api && pip-audit || true

  # Deploy to staging (Render/Netlify preview)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, security]
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy API to Render (Preview)
        run: |
          echo "Render automatically creates preview deployments for PRs"
          echo "Preview URL will be posted as a PR comment by Render"
      
      - name: Deploy Web to Netlify (Preview)
        run: |
          echo "Netlify automatically creates preview deployments for PRs"
          echo "Preview URL will be posted as a PR comment by Netlify"

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://backyard-builder.netlify.app
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy API to Render
        run: |
          echo "Render auto-deploys from main branch"
          echo "Deployment triggered by push to main"
          # Optional: Use Render API to trigger deploy
          # curl -X POST https://api.render.com/deploy/srv-xxx?key=${{ secrets.RENDER_DEPLOY_KEY }}
      
      - name: Deploy Web to Netlify
        run: |
          echo "Netlify auto-deploys from main branch"
          echo "Deployment triggered by push to main"
          # Optional: Use Netlify CLI to deploy
          # npx netlify deploy --prod --dir=apps/web/.next

  # Database migrations
  migrate-database:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          cd apps/api
          pip install alembic psycopg2-binary
      
      - name: Run migrations
        run: |
          cd apps/api
          # alembic upgrade head
          echo "Migrations should be run manually via Supabase dashboard for now"
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

  # Smoke tests
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-production, migrate-database]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Test API Health
        run: |
          curl -f https://backyard-builder-api.onrender.com/health || exit 1
      
      - name: Test Frontend
        run: |
          curl -f https://backyard-builder.netlify.app || exit 1
      
      - name: Run E2E tests
        run: |
          echo "E2E tests would run here with Playwright/Cypress"
          # npx playwright test

  # Notify on failure
  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [smoke-tests]
    if: failure()
    
    steps:
      - name: Send Slack notification
        run: |
          echo "Would send Slack notification about deployment failure"
          # curl -X POST ${{ secrets.SLACK_WEBHOOK }} -d '{"text":"Deployment failed!"}'