name: Deploy Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY_API: backyard-builder-api
  ECR_REPOSITORY_WEB: backyard-builder-web

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine.outputs.environment }}
    steps:
      - id: determine
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

  terraform-plan:
    runs-on: ubuntu-latest
    needs: determine-environment
    environment: ${{ needs.determine-environment.outputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          
      - name: Terraform Init
        working-directory: ./infra
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ needs.determine-environment.outputs.environment }}/terraform.tfstate"
            
      - name: Terraform Plan
        working-directory: ./infra
        run: |
          terraform plan \
            -var="environment=${{ needs.determine-environment.outputs.environment }}" \
            -out=tfplan
            
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: infra/tfplan

  deploy-api:
    runs-on: ubuntu-latest
    needs: [determine-environment, terraform-plan]
    environment: ${{ needs.determine-environment.outputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build and push API image
        working-directory: ./apps/api
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_API:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_API:latest
          
      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster bbf-${{ needs.determine-environment.outputs.environment }}-cluster \
            --service bbf-${{ needs.determine-environment.outputs.environment }}-api-service \
            --force-new-deployment

  deploy-web:
    runs-on: ubuntu-latest
    needs: [determine-environment, terraform-plan]
    environment: ${{ needs.determine-environment.outputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build web app
        run: pnpm --filter web build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.API_URL }}
          NEXT_PUBLIC_MAPBOX_TOKEN: ${{ secrets.MAPBOX_TOKEN }}
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Deploy to S3
        run: |
          aws s3 sync apps/web/out s3://${{ secrets.WEB_BUCKET }} --delete
          
      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

  run-migrations:
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-web]
    environment: ${{ needs.determine-environment.outputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        working-directory: ./apps/api
        run: |
          pip install alembic sqlalchemy psycopg2-binary
          
      - name: Get database credentials
        id: db-creds
        run: |
          SECRET=$(aws secretsmanager get-secret-value --secret-id bbf-${{ needs.determine-environment.outputs.environment }}-rds-secret --query SecretString --output text)
          echo "::add-mask::$(echo $SECRET | jq -r .password)"
          echo "DB_HOST=$(echo $SECRET | jq -r .host)" >> $GITHUB_OUTPUT
          echo "DB_PORT=$(echo $SECRET | jq -r .port)" >> $GITHUB_OUTPUT
          echo "DB_NAME=$(echo $SECRET | jq -r .dbname)" >> $GITHUB_OUTPUT
          echo "DB_USER=$(echo $SECRET | jq -r .username)" >> $GITHUB_OUTPUT
          echo "DB_PASSWORD=$(echo $SECRET | jq -r .password)" >> $GITHUB_OUTPUT
          
      - name: Run migrations
        working-directory: ./apps/api
        env:
          DATABASE_URL: postgresql://${{ steps.db-creds.outputs.DB_USER }}:${{ steps.db-creds.outputs.DB_PASSWORD }}@${{ steps.db-creds.outputs.DB_HOST }}:${{ steps.db-creds.outputs.DB_PORT }}/${{ steps.db-creds.outputs.DB_NAME }}
        run: |
          alembic upgrade head

  smoke-tests:
    runs-on: ubuntu-latest
    needs: [run-migrations]
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run smoke tests
        run: pnpm --filter web test:smoke
        env:
          API_URL: ${{ secrets.API_URL }}
          WEB_URL: ${{ secrets.WEB_URL }}