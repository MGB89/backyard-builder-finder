"""
Export model for tracking data exports
"""

from sqlalchemy import Column, String, DateTime, ForeignKey, Text, Enum, Boolean
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from sqlalchemy.dialects.postgresql import UUID
from core.database import Base
import enum


class ExportType(enum.Enum):
    """Export file types"""
    csv = "csv"
    geojson = "geojson"
    pdf = "pdf"


class Export(Base):
    """Data exports generated by users"""
    
    __tablename__ = "exports"
    
    # Primary key
    id = Column(UUID(as_uuid=True), primary_key=True, server_default=func.uuid_generate_v4(), index=True)
    
    # Multi-tenant
    org_id = Column(UUID(as_uuid=True), ForeignKey("organizations.id"), nullable=False, index=True)
    user_id = Column(UUID(as_uuid=True), ForeignKey("users.id"), nullable=False, index=True)
    
    # Optional search relationship
    search_id = Column(UUID(as_uuid=True), ForeignKey("searches.id"), nullable=True, index=True)
    
    # Export details
    name = Column(String(255), nullable=False)
    description = Column(Text, nullable=True)
    type = Column(Enum(ExportType), nullable=False, index=True)
    
    # File information
    file_url = Column(String(500), nullable=True)
    file_size = Column(String(50), nullable=True)  # Human readable size like "2.5 MB"
    
    # Export criteria
    filters = Column(Text, nullable=True)  # JSON string of export filters
    
    # Status
    status = Column(String(50), nullable=False, default="pending", index=True)  # pending, processing, completed, failed
    error_message = Column(Text, nullable=True)
    
    # Processing info
    started_at = Column(DateTime(timezone=True), nullable=True)
    completed_at = Column(DateTime(timezone=True), nullable=True)
    
    # Access control
    is_public = Column(Boolean, default=False, nullable=False)
    expires_at = Column(DateTime(timezone=True), nullable=True)
    
    # Timestamps
    created_at = Column(DateTime(timezone=True), server_default=func.now(), nullable=False)
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now(), nullable=False)
    
    # Relationships
    organization = relationship("Organization", back_populates="exports")
    user = relationship("User", back_populates="exports")
    search = relationship("Search", back_populates="exports")
    
    def __repr__(self):
        return f"<Export(id={self.id}, name='{self.name}', type={self.type}, status='{self.status}')>"
    
    @property
    def is_completed(self):
        """Check if export is completed"""
        return self.status == "completed"
    
    @property
    def is_failed(self):
        """Check if export failed"""
        return self.status == "failed"
    
    @property
    def is_expired(self):
        """Check if export is expired"""
        if not self.expires_at:
            return False
        from datetime import datetime, timezone
        return datetime.now(timezone.utc) > self.expires_at